name: Docker Image CI for Memcached Registrar

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Dockerfile에서 Gradle 빌드를 수행하므로, Actions 워크플로우에서 별도의 JDK/Gradle 설정 및 빌드 단계는
      # Docker 빌드 컨텍스트 최적화 (예: 미리 JAR를 빌드하여 컨텍스트에 포함) 목적이 아니라면 생략 가능합니다.
      # 여기서는 Dockerfile이 모든 빌드 과정을 처리한다고 가정합니다.

      - name: Set up QEMU # Optional: For multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest,${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
          # 다음은 빌드 캐시를 GitHub Actions 캐시로 사용하는 예시입니다.
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Pushed image digest 출력 (선택 사항)
      - name: Print image digest
        if: steps.build-and-push.outputs.digest
        run: echo "Image digest: ${{ steps.build-and-push.outputs.digest }}" 